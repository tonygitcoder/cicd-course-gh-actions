name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # build:
  #   name: "Build and Test"
  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: read
  #     pull-requests: write

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Use Node.js 22.x
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 22.x
  #         cache: "npm"

  #     - run: npm ci

  #     - run: npm run build --if-present

  #     - run: npm test

  #     - name: Vitest Coverage Report
  #       uses: davelosert/vitest-coverage-report-action@v2.7.0

  # package-and-publish:
  #   needs:
  #     - build

  #   name: üê≥ Package & Publish
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Sign in to GitHub Container Registry
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #         registry: ghcr.io

  #     - name: Generate Docker Metadata
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ghcr.io/${{ github.repository }}
  #         tags: |
  #           type=ref,event=tag
  #           type=ref,event=pr
  #           type=sha,event=branch,prefix=,suffix=,format=short

  #     - name: Build and Push Docker Image
  #       uses: docker/build-push-action@v2
  #       with:
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  deploy:
    name: Deploy to AWS EC2 Minikube
    runs-on: ubuntu-latest
    # needs:
    #   - package-and-publish

    env:
      EC2_HOST: ${{ secrets.EC2_PUBLIC_IP }}
      EC2_USER: ubuntu
      EC2_KEY: ${{ secrets.AWS_EC2_SSH_KEY }}
      EC2_PORT: 22

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug GitHub Secret
        run: |
          echo "Value of EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}"
          echo "Key length: $(echo "${{ secrets.AWS_EC2_SSH_KEY }}" | wc -c)"

      - name: Prepare Kubernetes Directory
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          port: ${{ env.EC2_PORT }}
          script: mkdir -p /home/${{ env.EC2_USER }}/kubernetes

      - name: Copy Deployment File to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          port: ${{ env.EC2_PORT }}
          script: |
            scp -o StrictHostKeyChecking=no /github/workspace/deployment/aws-cicd-pipeline/templates/deployment.yaml ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/${{ env.EC2_USER }}/kubernetes/

      - name: Deploy to Minikube
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          port: ${{ env.EC2_PORT }}
          script: |
            kubectl apply -f /home/${{ env.EC2_USER }}/kubernetes/deployment.yaml
